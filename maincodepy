from otree.api import *


doc = """
This is a one-shot "Prisoner's Dilemma". Two players are asked separately
whether they want to cooperate or defect. Their choices directly determine the
payoffs.
"""


class C(BaseConstants):
    NAME_IN_URL = 'staghunt_game'
    PLAYERS_PER_GROUP = 2
    NUM_ROUNDS = 5
    stag_match_payoff = cu(4)
    stag_mismatch_payoff = cu(0)
    h_1_hare_payoff = cu(1)
    h_2_hare_payoff = cu(2)
    INSTRUCTIONS_TEMPLATE = 'staghuntjb/instructions.html'
   
    
    


class Subsession(BaseSubsession):
    pass
    


class Group(BaseGroup):
    pass 

class Player( BasePlayer):
    hschoice = models.BooleanField(
        choices=[True,False],
        doc="""This player's decision is either stag or hare""",
        widget=widgets.RadioSelect,
            )


def other_player(player: Player):
    return player.get_others_in_group()[0]   

        
def h_2_hare_payoff(self):
    if self.round_number <= 3:
        h_2_hare_payoff = cu(2)
    else:
        h_2_hare_payoff = cu(3)
    return h_2_hare_payoff

def set_payoffs(group: Group):
    h_1 = group.get_player_by_id(1)
    h_2 = group.get_player_by_id(2)
    if h_1.hschoice == True and h_2.hschoice == True:
        h_1.payoff = C.stag_match_payoff
        h_2.payoff = C.stag_match_payoff
    else:
        if h_1.hschoice == True and h_2.hschoice == False:
            h_1.payoff = C.stag_mismatch_payoff
            h_2.payoff = h_2_hare_payoff(h_2)
        else:
            if h_1.hschoice == False and h_2.hschoice == True:
                h_1.payoff = C.h_1_hare_payoff
                h_2.payoff = C.stag_mismatch_payoff
            else:
                h_1.payoff = C.h_1_hare_payoff
                h_2.payoff = h_2_hare_payoff(h_2)

    
    

# PAGES

class Introduction(Page):
    timeout_seconds = 100


class Decision(Page):
    form_model = 'player'
    form_fields = ['hschoice']


class ResultsWaitPage(WaitPage):
    after_all_players_arrive = set_payoffs    

class Results(Page):
    @staticmethod
    def vars_for_template(player: Player):
        opponent = other_player(player)
        return dict(
            opponent=opponent,
            my_decision=player.field_display('hschoice'),
            opponent_decision=opponent.field_display('hschoice'),
            opponent_payoff=opponent.payoff,

        )


page_sequence = [Introduction, Decision, ResultsWaitPage, Results]
